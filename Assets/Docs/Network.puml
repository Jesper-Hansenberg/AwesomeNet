@startuml

set separator ::
namespace MyGame{
    namespace DTOs{
        class PlayerPosition{}
        class Position{}
        class User{}
        class UnityLogger{}
    }
    class GameController <<MonoBehaviour>>{
        + void Awake()
        + void Start()
        + void Update()
        + void SetServer(Server server)
        + void SetClient(Client client)
        + Server GetServer()
        + Client GetClient()
        - void HandleMessage(Message msg)
    }

    namespace NetworkLib{
        namespace Facade{
            interface I_SSSNH_Facade{
                + event Action<Message> OnMessage
                + I_SSSNH_Facade Start(TCP)
                + I_SSSNH_Facade Start(UDP)
                + I_SSSNH_Facade[] Start(TCP,UDP)
                + void Stop()
            }

            abstract class A_SSSNH_Client
            {
                + event Action<Message> OnMessage
                + void Send(Message msg)
                + void SendAsync(Message msg)
            }

            class SSSNH_Client{

            }

            abstract class A_SSSNH_Server
            {
                + event Action<Message> OnMessage
                + event Action<Message> OnClientConnected
                + event Action<Message> OnClientDisconnected
            }

            class SSSNH_Server{

            }

            Super_Seje_Starter_Networking_Helper <|-- A_SSSNH_Client
            Super_Seje_Starter_Networking_Helper <|-- A_SSSNH_Server
            A_SSSNH_Client <|-- SSSNH_Client
            A_SSSNH_Server <|-- SSSNH_Server
        }

        namespace Common{
            namespace DTOs{
                class Authentication{
                    + string Username
                    + string Password
                }
            }
            namespace Logger{
                interface ILogNetwork{
                    + void Log(string message);
                    + void LogWarning(string message);
                    + void LogError(string message);
                }
                class DefaultLogger{

                }
                DefaultLogger -up-|> ILogNetwork
            }
        }
        interface IClient{
            + bool IsConnected()
            + void Disconnect()
            + async Task SendAsync(byte[] bytes)
            + async Task SendAsync(object obj)
            + void Send(object obj)
            + void Send(byte[] bytes)
            + T Deserialize<T>(byte[] data)
            + byte[] Serialize(object obj)
        }
        interface IServer{
            + void UpdateServer()
            + void Shutdown()
        }

        namespace GameClient{
            class Client {
                + TcpClient Tcp;
                + Network NetworkHandler;
                - NetworkStream _tcpStream;
                - byte[] _TcpReceiveBuffer;
                - BinaryFormatter _br;
                + {static} ILogNetwork Log
                + Client(ILogNetwork log, TcpClient socket)
                - void RecieveCallback(IAsyncResult ar)
            }
            class Network {
                + Client Client
                + User User = null
                + bool InGame = false
                + bool InQueue = false
                + ConcurrentQueue<Message> ActionQueue
                + Network(Client client)
            }
        }
        namespace GameServer{
            class Server{
                + int Port
                + TcpListener TCPListener
                + List<Client> Clients
                + MatchMaking MatchMaking
                + {static} ILogNetwork Log
                + Server(ILogNetwork log, int port)
                - void TCPAcceptCallback(IAsyncResult ar)
                - void CheckClientQueues()
            }
            class Match{
                + List<Client> Clients
                - ConcurrentDictionary<string, Message> _playerPositions
                + void AddPlayer(Client client)
                + void RemovePlayer(Client client)
                + Message[] GetState()
                + void UpdateState()
            }
            class MatchMaking{
                + List<Match> Matches
                + void UpdateMatches()
                + void Join(Client client)
            }
        }
        class Message{
            + string Id
            + MessageType MsgType
            + byte[] Data
            + string Callback
        }
        enum MessageType{
            User,
            PlayerPosition,
            Shoot,
            Player,
            Update,
            Message,
            Login,
            JoinQueue,
            LoginResponse,
            MatchJoined
        }
    }

    struct CONSTANTS <<static>> {
        + {static} int PORT
        + {static} Vector3 CameraOffset
        + {static} float Gravity
        + {static} float ProjectileSpeed
        + {static} float PlayerSpeed
        + {static} float JumpForce
    }

    namespace NetworkSetup{

        class ClientInit <<MonoBehaviour>>{
            + string IP = "127.0.0.1"
            + int Port = 8052
            + {static} ClientInit Instance
            + void Awake()
            + void Send(object obj)
            # void FixedUpdate()
        }
        class ServerInit <<MonoBehaviour>>{
            + void Start()
            + void FixedUpdate()
            + void OnApplicationQuit()
        }
        class UnityLogger{}
    }
}


MyGame::NetworkLib::GameClient::Client *-- MyGame::NetworkLib::GameClient::Network

MyGame::NetworkSetup::ClientInit *-- MyGame::NetworkLib::GameClient::Client
MyGame::NetworkSetup::ServerInit *-- MyGame::NetworkLib::GameServer::Server

MyGame::NetworkLib::GameServer::Server *-- MyGame::NetworkLib::GameServer::MatchMaking
MyGame::NetworkLib::GameServer::Server *-- MyGame::NetworkLib::GameClient::Client
MyGame::NetworkLib::GameServer::MatchMaking *-- MyGame::NetworkLib::GameServer::Match
MyGame::NetworkLib::GameServer::Match o-- MyGame::NetworkLib::GameClient::Client

MyGame::NetworkLib::IClient <|-- MyGame::NetworkLib::GameClient::Client
MyGame::NetworkLib::IServer <|-- MyGame::NetworkLib::GameServer::Server

MyGame::NetworkLib::GameServer::Server *-- MyGame::NetworkLib::Common::DTOs::Authentication
MyGame::NetworkLib::GameClient::Network *-- MyGame::NetworkLib::Common::DTOs::Authentication


@enduml
