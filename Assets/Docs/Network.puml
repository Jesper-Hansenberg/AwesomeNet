@startuml

set separator ::
namespace MyGame{
    namespace DTOs{
        class PlayerPosition{}
        class Position{}
        class User{}
    }
    namespace NetworkLib{
        class Connection{
            + string Username
            + string Password
        }
        interface IClient{
            + bool IsConnected()
            + void Disconnect()
            + async Task SendAsync(byte[] bytes)
            + async Task SendAsync(object obj)
            + void Send(object obj)
            + void Send(byte[] bytes)
            + T Deserialize<T>(byte[] data)
            + byte[] Serialize(object obj)
        }
        interface IServer{
            + void UpdateServer()
            + void Shutdown()
        }
        namespace Logger{
            interface ILogNetwork{
                + ILogNetwork Instance();
                + void Log(string message);
                + void LogWarning(string message);
                + void LogError(string message);
            }
        }
        namespace GameClient{
            class Client {
                + TcpClient Tcp;
                + Network NetworkHandler;
                - NetworkStream _tcpStream;
                - byte[] _TcpReceiveBuffer;
                - BinaryFormatter _br;
                + Client(TcpClient socket)
                - void RecieveCallback(IAsyncResult ar)
            }
            class Network {
                + Client Client
                + User User = null
                + bool InGame = false
                + bool InQueue = false
                + ConcurrentQueue<Message> ActionQueue
                + Network(Client client)
            }
        }
        namespace GameServer{
            class Server{
                + int Port
                + TcpListener TCPListener
                + List<Client> Clients
                + MatchMaking MatchMaking
                + Server(int port)
                - void TCPAcceptCallback(IAsyncResult ar)
                - void CheckClientQueues()
            }
            class Match{
                + List<Client> Clients
                - ConcurrentDictionary<string, Message> _playerPositions
                + void AddPlayer(Client client)
                + void RemovePlayer(Client client)
                + Message[] GetState()
                + void UpdateState()
            }
            class MatchMaking{
                + List<Match> Matches
                + void UpdateMatches()
                + void Join(Client client)
            }
        }
        class Message{
            + string Id
            + MessageType MsgType
            + byte[] Data
            + string Callback
        }
        enum MessageType{
            User,
            PlayerPosition,
            Shoot,
            Player,
            Update,
            Message,
            Login,
            JoinQueue,
            LoginResponse,
            MatchJoined
        }
    }

    struct CONSTANTS <<static>> {
        + {static} int PORT
        + {static} Vector3 CameraOffset
        + {static} float Gravity
        + {static} float ProjectileSpeed
        + {static} float PlayerSpeed
        + {static} float JumpForce
    }

    class Player <<MonoBehaviour>>{

    }
    class Enemy <<MonoBehaviour>>{

    }
    namespace NetworkSetup{
        class GameController <<MonoBehaviour>>{
            + void Awake()
            + void Start()
            + void Update()
            + void SetServer(Server server)
            + void SetClient(Client client)
            + Server GetServer()
            + Client GetClient()
            - void HandleMessage(Message msg)
        }
        class ClientInit <<MonoBehaviour>>{
            + string IP = "127.0.0.1"
            + int Port = 8052
            + {static} ClientInit Instance
            + void Awake()
            + void Send(object obj)
            # void FixedUpdate()
        }
        class ServerInit <<MonoBehaviour>>{
            + void Start()
            + void FixedUpdate()
            + void OnApplicationQuit()
        }
        class UnityLogger <<MonoBehaviour>>{
            + void Awake()
            + void Log(string message)
            + void LogWarning(string message)
            + void LogError(string message)
        }
    }
}


MyGame::NetworkLib::GameClient::Client *-- MyGame::NetworkLib::GameClient::Network
MyGame::NetworkSetup::GameController *-- MyGame::Enemy
MyGame::NetworkSetup::GameController *-- MyGame::Player
MyGame::NetworkSetup::GameController -- MyGame::NetworkLib::GameClient::Network : Dequeues

MyGame::NetworkSetup::ClientInit *-- MyGame::NetworkLib::GameClient::Client
MyGame::NetworkSetup::ServerInit *-- MyGame::NetworkLib::GameServer::Server

MyGame::NetworkLib::GameServer::Server *-- MyGame::NetworkLib::GameServer::MatchMaking
MyGame::NetworkLib::GameServer::Server *-- MyGame::NetworkLib::GameServer::Client
MyGame::NetworkLib::GameServer::MatchMaking *-- MyGame::NetworkLib::GameServer::Match
MyGame::NetworkLib::GameServer::Match *-- MyGame::NetworkLib::GameClient::Client

MyGame::NetworkLib::Logger::ILogNetwork <|-- MyGame::NetworkSetup::UnityLogger

MyGame::NetworkLib::IClient <|-- MyGame::NetworkLib::GameClient::Client
MyGame::NetworkLib::IServer <|-- MyGame::NetworkLib::GameServer::Server

MyGame::NetworkLib::GameServer::Server *-- MyGame::NetworkLib::Connection
MyGame::NetworkLib::GameClient::Network *-- MyGame::NetworkLib::Connection

@enduml
