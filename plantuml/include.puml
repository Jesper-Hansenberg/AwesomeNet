@startuml
class Client {
    + Client(ip:string, port:int)
    + Send(bytes:byte[]) : void
    + Send(obj:object) : void
}
Client --> "NetworkHandler" Network
class Network {
    + Receive(obj:object) : void
}
class "ConcurrentQueue`1"<T> {
}
Network o-> "ActionQueue<Batch>" "ConcurrentQueue`1"
class Batch {
    + Batch(projectiles:Projectile[], users:User[])
    + Append(batch:Batch) : void
    + <<override>> ToString() : string
}
class CONSTANTS <<static>> {
    + {static} <<readonly>> Gravity : float = 9.82f
    + {static} <<readonly>> ProjectileSpeed : float = 100f
    + {static} <<readonly>> PlayerSpeed : float = 5f
    + {static} <<readonly>> JumpForce : float = 1000f
    + {static} <<readonly>> ServerSpeed : float = 0.1f
    + {static} <<readonly>> Port : int = 8052
    + {static} <<readonly>> ServerIP : string = "127.0.0.1"
    + {static} <<readonly>> BufferSize : int = 4096
    + {static} <<readonly>> PlayerPrefab : string = "Prefabs/Player"
    + {static} <<readonly>> ProjectilePrefab : string = "Prefabs/Projectile"
    + {static} <<readonly>> WeaponPrefab : string = "Prefabs/Weapon"
}
CONSTANTS o-> "CameraOffset" Vector3
class Position {
    + X : float
    + Y : float
    + Z : float
    + Position(x:float, y:float, z:float, precision:int)
    + Position(vector:Vector3, precision:int)
    + <<override>> ToString() : string
}
class Projectile {
    + ID : string
    + Damage : float
    + Projectile(owner:User, start:Position, end:Position, damage:float)
    + <<override>> ToString() : string
}
Projectile --> "Start" Position
Projectile --> "Current" Position
Projectile --> "End" Position
Projectile --> "Owner" User
class User {
    + ID : string
    + Username : string
    + Health : float
    + User(username:string, x:float, y:float, z:float)
    + User(username:string, x:float, y:float, z:float, health:float)
    + User(id:string, username:string, x:float, y:float, z:float, health:float)
    + <<override>> ToString() : string
}
User --> "Pos" Position
class Network {
    + Network(serverClient:ServerClient)
    + GetBatch() : Batch
    + Recieve(obj:object) : void
    + SendBatch(batch:Batch) : void
    + SendUser(user:User) : void
    + SendProjectile(projectile:Projectile) : void
}
class "List`1"<T> {
}
Network --> "UserRef" User
Network o-> "Projectiles<Projectile>" "List`1"
class Server {
    + Port : int <<get>>
    + Server(port:int)
    + Shutdown() : void
    + Update() : void
}
class "List`1"<T> {
}
Server --> "TCPListener" TcpListener
Server o-> "Clients<ServerClient>" "List`1"
class ServerClient {
    + ServerClient(socket:TcpClient)
    + IsConnected() : bool
    + Disconnect() : void
    + Send(bytes:byte[]) : void
    + Deserialize(data:byte[]) : object
    + Serialize(obj:object) : byte[]
}
ServerClient --> "Socket" TcpClient
ServerClient --> "NetworkHandler" Network
@enduml
